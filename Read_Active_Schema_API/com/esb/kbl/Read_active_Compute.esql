BROKER SCHEMA com.esb.kbl


CREATE COMPUTE MODULE  
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET Environment.AuditRecord.NodeName  			= BrokerName;
		SET Environment.AuditRecord.IntegrationServer  	= ExecutionGroupLabel;
		SET Environment.AuditRecord.FlowName  			= MessageFlowLabel;
		SET Environment.AuditRecord.ApplicationName  	= ApplicationLabel;	
		SET Environment.AuditRecord.Request = InputRoot.JSON.Data;
	
		DECLARE processingType CHARACTER;
		DECLARE encdata Character;
		DECLARE payload char;
		SET payload = CAST(ASBITSTREAM(InputRoot.JSON.Data CCSID 1208 ENCODING 546) AS CHARACTER CCSID 1208);
		DECLARE cer CHAR;
	--	SET cer='P:\oldlap\KBL_NEW\kblbank.in\kblbank.in\wildcard_kblbankk.in.crt';
		SET cer='D:\kblbank.in\APIUATCLASS3NEW.pem';
	
		DECLARE solid char;
		SET solid=InputLocalEnvironment.HTTP.Input.QueryString.solId;
		SET OutputLocalEnvironment.HTTP.Output.QueryString.solId=Enc(solid,cer);
		DECLARE channel char;
		SET channel=InputLocalEnvironment.HTTP.Input.QueryString.channel;
		SET OutputLocalEnvironment.HTTP.Output.QueryString.channel=Enc(channel,cer);
		DECLARE applicationNo char;
		SET applicationNo=InputLocalEnvironment.HTTP.Input.QueryString.applicationNo;
		SET OutputLocalEnvironment.HTTP.Output.QueryString.applicationNo=Enc(applicationNo,cer);
		DECLARE schemeCode char;
		SET schemeCode=InputRoot.HTTP.Input.QueryString."schemeCode";
		SET OutputRoot.HTTP.Output.QueryString."schemeCode"=Enc(schemeCode,cer);
		DECLARE clientReferenceNo char;
		SET clientReferenceNo=InputRoot.HTTP.Input.QueryString."clientReferenceNo";
		SET OutputRoot.HTTP.Output.QueryString."clientReferenceNo"=Enc(clientReferenceNo,cer);
		
		
		SET encdata=Enc(payload,cer);
		SET OutputRoot.BLOB.BLOB=CAST(encdata AS BLOB CCSID 1208);
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE Enc (IN payload CHAR,IN Publickey CHAR)--, IN publickey CHAR )
	RETURNS CHARACTER
	LANGUAGE JAVA
	EXTERNAL NAME "Esbaencryptiondec.encryptUsingGcmAsymetric";
END MODULE;
	
	
	
	
	

CREATE COMPUTE MODULE Read_active_Compute_Response
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE ev REFERENCE TO Environment.Variables;
		DECLARE decr,ENC_Key,ENC_Payload,result CHARACTER;
		--CREATE LASTCHILD OF ev.Response DOMAIN 'JSON' PARSE(InputRoot.BLOB.BLOB);
		
		Declare Response CHARACTER;
		SET Response = CAST(ASBITSTREAM(Environment.encryptdata CCSID 1208 ENCODING 546) AS CHARACTER CCSID 1208);
		Declare sessionkey CHARACTER;
		SET sessionkey=SUBSTRING(Environment.encryptdata BEFORE '::');
		DECLARE Payload char;
		SET Payload=SUBSTRING(Environment.encryptdata AFTER '::');
		DECLARE decryptaeskey blob;
		DECLARE Privatekey CHAR;
	--	SET Privatekey='P:\oldlap\KBL_NEW\kblbank.in\kblbank.in\kblbnkpvrr.key';
		SET Privatekey='D:\kblbank.in\kblbnkpvrr.key';
		--SET decryptaeskey=DEC(sessionkey,Privatekey);
		DECLARE Decrypteddata char;
		SET Decrypteddata=DEC(sessionkey,Privatekey,Payload);

--		SET ENC_Key=InputRoot.HTTPResponseHeader."x-perfios-encryption-key";
--		SET ENC_Payload=ev.Response.JSON.Data.encryptedPayload;
--		SET decr=dec(ENC_Key,ENC_Payload,privatekey);
--		SET result=CAST(decr AS BLOB CCSID 1208 );
--		CREATE LASTCHILD OF ev.Response1 DOMAIN 'JSON' PARSE(result);

		SET OutputRoot.XMLNSC=ev.Response.JSON.Data;
		SET Environment.AuditRecord.Response = OutputRoot.XMLNSC;
		PROPAGATE TO TERMINAL 'out1';

		RETURN TRUE;
	END;

	CREATE PROCEDURE DEC (IN sessionkey CHAR,IN Privatekey CHAR,IN Payload CHAR)--, IN publickey CHAR )
	RETURNS CHARACTER
	LANGUAGE JAVA
	EXTERNAL NAME "Esbaencryptiondec.decryptUsingGcmAsymetric";

END MODULE;

		
		
		
		
		
		
		
	
	
	
	
	